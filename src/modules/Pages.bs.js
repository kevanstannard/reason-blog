// Generated by ReScript, PLEASE EDIT WITH CARE
'use strict';

var Fs = require("fs");
var Path = require("path");
var Curry = require("bs-platform/lib/js/curry.js");
var Rimraf = require("rimraf");
var Caml_obj = require("bs-platform/lib/js/caml_obj.js");
var Belt_Array = require("bs-platform/lib/js/belt_Array.js");
var Caml_option = require("bs-platform/lib/js/caml_option.js");
var FrontMatter = require("front-matter");
var Belt_SortArray = require("bs-platform/lib/js/belt_SortArray.js");
var File$ReasonBlog = require("./File.bs.js");
var Markdown$ReasonBlog = require("../bindings/Markdown.bs.js");

function parsePage(data, filePath) {
  var fm = FrontMatter(data);
  var match = fm.attributes;
  var id = match.id;
  var body = Markdown$ReasonBlog.render(fm.body);
  var pageId = id !== undefined ? id : Path.basename(filePath, ".md");
  return {
          filePath: filePath,
          id: pageId,
          date: match.date,
          title: match.title,
          body: body
        };
}

function readPage(filePath) {
  var __x = File$ReasonBlog.readFile(filePath);
  return __x.then(function (content) {
              return Promise.resolve(parsePage(content, filePath));
            });
}

function readPages(filePaths) {
  return Promise.all(filePaths.map(readPage));
}

function compareDateDescending(pageA, pageB) {
  var match = pageA.date;
  var match$1 = pageB.date;
  if (match === undefined) {
    return 0;
  }
  if (match$1 === undefined) {
    return 0;
  }
  var b = Caml_option.valFromOption(match$1);
  var a = Caml_option.valFromOption(match);
  if (Caml_obj.caml_equal(a, b)) {
    return 0;
  } else if (Caml_obj.caml_lessthan(a, b)) {
    return 1;
  } else {
    return -1;
  }
}

function readPageCollection(dirPath) {
  var __x = File$ReasonBlog.glob(dirPath + "/*.md");
  var __x$1 = __x.then(readPages);
  return __x$1.then(function (collection) {
              return Promise.resolve(Belt_SortArray.stableSortBy(collection, compareDateDescending));
            });
}

function findPageById(collection, id) {
  return Caml_option.undefined_to_opt(collection.find(function (page) {
                  return page.id === id;
                }));
}

function pageCollectionToBlogPosts(collection) {
  return Belt_Array.reduce(collection, [], (function (blogPosts, page) {
                var title = page.title;
                var date = page.date;
                var filePath = page.filePath;
                if (date !== undefined) {
                  if (title !== undefined) {
                    var blogPost_id = page.id;
                    var blogPost_date = Caml_option.valFromOption(date);
                    var blogPost_body = page.body;
                    var blogPost = {
                      id: blogPost_id,
                      date: blogPost_date,
                      title: title,
                      body: blogPost_body
                    };
                    return Belt_Array.concat(blogPosts, [blogPost]);
                  }
                  console.log("title missing in " + filePath);
                  return blogPosts;
                }
                console.log("date missing in " + filePath);
                return blogPosts;
              }));
}

function ensureDirectoryExists(dir) {
  if (!Fs.existsSync(dir)) {
    Fs.mkdirSync(dir);
    return ;
  }
  
}

function deleteDirectoryContents(dir) {
  return new Promise((function (resolve, reject) {
                var glob = dir + "/**/*";
                return Rimraf(glob, (function (error) {
                              if (error == null) {
                                return resolve(undefined);
                              } else {
                                return reject({
                                            RE_EXN_ID: "Failure",
                                            _1: "Error deleting the directory " + dir
                                          });
                              }
                            }));
              }));
}

function createBlog(outputDir, renderBlogPost, renderBlogIndex, collection) {
  var blogPosts = pageCollectionToBlogPosts(collection);
  var createPosts = function (param) {
    var __x = Promise.all(Belt_Array.map(blogPosts, (function (param) {
                var html = Curry._1(renderBlogPost, param);
                var filePath = outputDir + "/" + param.id + ".html";
                return File$ReasonBlog.writeFile(filePath, html);
              })));
    return __x.then(function (param) {
                return Promise.resolve(undefined);
              });
  };
  var createIndex = function (param) {
    var html = Curry._1(renderBlogIndex, blogPosts);
    var filePath = outputDir + "/index.html";
    return File$ReasonBlog.writeFile(filePath, html);
  };
  ensureDirectoryExists(outputDir);
  var __x = deleteDirectoryContents(outputDir);
  var __x$1 = __x.then(createPosts);
  return __x$1.then(createIndex);
}

exports.readPageCollection = readPageCollection;
exports.findPageById = findPageById;
exports.createBlog = createBlog;
/* fs Not a pure module */
