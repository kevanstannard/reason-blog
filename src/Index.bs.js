// Generated by BUCKLESCRIPT, PLEASE EDIT WITH CARE
'use strict';

var Fs = require("fs");
var Glob = require("glob");
var Path = require("path");
var $$Array = require("bs-platform/lib/js/array.js");
var Curry = require("bs-platform/lib/js/curry.js");
var Js_dict = require("bs-platform/lib/js/js_dict.js");
var Caml_obj = require("bs-platform/lib/js/caml_obj.js");
var Mustache = require("mustache");
var Caml_option = require("bs-platform/lib/js/caml_option.js");
var Caml_exceptions = require("bs-platform/lib/js/caml_exceptions.js");
var DateFns$ReasonBlog = require("./bindings/DateFns.bs.js");
var Markdown$ReasonBlog = require("./bindings/Markdown.bs.js");
var FrontMatter$ReasonBlog = require("./bindings/FrontMatter.bs.js");

var NodeError = Caml_exceptions.create("Index-ReasonBlog.NodeError");

var blogTitle = "Hello ReasonML";

var postsDir = "./content/posts";

var templatesDir = "./content/templates";

var docsDir = "./docs";

function readFile(path) {
  return new Promise((function (resolve, reject) {
                var onRead = function (error, data) {
                  if (error == null) {
                    if (data == null) {
                      return reject([
                                  NodeError,
                                  "Reading post file returned null"
                                ]);
                    } else {
                      return resolve(data);
                    }
                  } else {
                    return reject([
                                NodeError,
                                "Error reading post file"
                              ]);
                  }
                };
                Fs.readFile(path, "utf-8", onRead);
                return /* () */0;
              }));
}

function ensureDocsDir(param) {
  if (Fs.existsSync(docsDir)) {
    return 0;
  } else {
    Fs.mkdirSync(docsDir);
    return /* () */0;
  }
}

function pathToKey(path) {
  return Path.basename(path, ".md");
}

function formatDate(date) {
  return Curry._2(DateFns$ReasonBlog.format, date, "yyyy-MM-dd");
}

function writePost(key, html) {
  return new Promise((function (resolve, reject) {
                var fileName = docsDir + ("/" + (key + ".html"));
                Fs.writeFile(fileName, html, (function (error) {
                        if (error == null) {
                          return resolve(key);
                        } else {
                          return reject([
                                      NodeError,
                                      "Error writing post file"
                                    ]);
                        }
                      }));
                return /* () */0;
              }));
}

function applyTemplate(template, post) {
  var partial_arg = {
    title: post.title,
    body: post.body
  };
  return (function (param, param$1) {
      return Mustache.render(template, partial_arg, param !== undefined ? Caml_option.valFromOption(param) : undefined);
    });
}

function writePosts(posts) {
  var postTemplatePath = "./content/templates/post.html";
  return readFile(postTemplatePath).then((function (template) {
                return Promise.all($$Array.map((function (post) {
                                    var data = {
                                      blogTitle: blogTitle,
                                      date: Curry._2(DateFns$ReasonBlog.format, post.date, "yyyy-MM-dd"),
                                      title: post.title,
                                      body: post.body
                                    };
                                    var html = Mustache.render(template, data, undefined);
                                    return writePost(post.key, html);
                                  }), posts)).then((function (param) {
                              return Promise.resolve(/* () */0);
                            }));
              }));
}

function getValue(attributes, key) {
  var value = Js_dict.get(attributes, key);
  if (value !== undefined) {
    return value;
  } else {
    return "";
  }
}

function readPost(path) {
  return readFile(path).then((function (data) {
                var key = Path.basename(path, ".md");
                var fmData = Curry._1(FrontMatter$ReasonBlog.fm, data);
                var title = fmData.attributes.title;
                var date = fmData.attributes.date;
                var body = Markdown$ReasonBlog.markdownIt.render(fmData.body);
                return Promise.resolve({
                            key: key,
                            date: date,
                            title: title,
                            body: body
                          });
              }));
}

function sortByDateDescending(postA, postB) {
  var a = postA.date;
  var b = postB.date;
  if (Caml_obj.caml_equal(a, b)) {
    return 0;
  } else if (Caml_obj.caml_lessthan(a, b)) {
    return 1;
  } else {
    return -1;
  }
}

function sortPosts(posts) {
  $$Array.stable_sort(sortByDateDescending, posts);
  return posts;
}

function readPosts(paths) {
  return Promise.all($$Array.map(readPost, paths)).then((function (posts) {
                return Promise.resolve(($$Array.stable_sort(sortByDateDescending, posts), posts));
              }));
}

function readPostPaths(param) {
  return new Promise((function (resolve, reject) {
                Glob("./content/posts/*.md", (function (error, paths) {
                        if (error == null) {
                          return resolve(paths);
                        } else {
                          return reject([
                                      NodeError,
                                      "Error reading post paths"
                                    ]);
                        }
                      }));
                return /* () */0;
              }));
}

function writeIndexFile(html) {
  return new Promise((function (resolve, reject) {
                var fileName = "./docs/index.html";
                Fs.writeFile(fileName, html, (function (error) {
                        if (error == null) {
                          return resolve((function (prim) {
                                        return /* () */0;
                                      }));
                        } else {
                          return reject([
                                      NodeError,
                                      "Error writing index file"
                                    ]);
                        }
                      }));
                return /* () */0;
              }));
}

function writeIndex(posts) {
  var indexTemplatePath = "./content/templates/index.html";
  return readFile(indexTemplatePath).then((function (template) {
                  var postsData = $$Array.map((function (post) {
                          return {
                                  path: post.key + ".html",
                                  date: Curry._2(DateFns$ReasonBlog.format, post.date, "yyyy-MM-dd"),
                                  title: post.title
                                };
                        }), posts);
                  return writeIndexFile(Mustache.render(template, {
                                  blogTitle: blogTitle,
                                  posts: postsData
                                }, undefined));
                })).then((function (param) {
                return Promise.resolve(/* () */0);
              }));
}

readPostPaths(/* () */0).then(readPosts).then((function (posts) {
          ensureDocsDir(/* () */0);
          return Promise.all(/* array */[
                      writeIndex(posts),
                      writePosts(posts)
                    ]);
        })).catch((function (error) {
        console.log(error);
        return Promise.resolve(/* array */[]);
      }));

exports.NodeError = NodeError;
exports.blogTitle = blogTitle;
exports.postsDir = postsDir;
exports.templatesDir = templatesDir;
exports.docsDir = docsDir;
exports.readFile = readFile;
exports.ensureDocsDir = ensureDocsDir;
exports.pathToKey = pathToKey;
exports.formatDate = formatDate;
exports.writePost = writePost;
exports.applyTemplate = applyTemplate;
exports.writePosts = writePosts;
exports.getValue = getValue;
exports.readPost = readPost;
exports.sortByDateDescending = sortByDateDescending;
exports.sortPosts = sortPosts;
exports.readPosts = readPosts;
exports.readPostPaths = readPostPaths;
exports.writeIndexFile = writeIndexFile;
exports.writeIndex = writeIndex;
/*  Not a pure module */
